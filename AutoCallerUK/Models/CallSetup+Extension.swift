//
//  CallSetup.swift
//  HealthcareCallApp
//
//  Core Data model for call setup configurations
//

import Foundation
import CoreData

extension CallSetup {
    
    // Computed properties
    var timeString: String {
        return String(format: "%02d:%02d", hour, minute)
    }
    
    var weekdaysArray: [Int] {
        get {
            guard let weekdaysString = weekdays,
                  let data = weekdaysString.data(using: .utf8),
                  let array = try? JSONDecoder().decode([Int].self, from: data) else {
                return []
            }
            return array
        }
        set {
            if let data = try? JSONEncoder().encode(newValue),
               let string = String(data: data, encoding: .utf8) {
                weekdays = string
            }
        }
    }
    
    var isCurrentlySnoozed: Bool {
        guard let snoozeUntil = snoozeUntil else { return false }
        return snoozeUntil > Date()
    }
    
    var nextCallDate: Date? {
        let calendar = Calendar.current
        let now = Date()
        let currentWeekday = calendar.component(.weekday, from: now) - 1 // Convert to 0-6 format
        let currentHour = calendar.component(.hour, from: now)
        let currentMinute = calendar.component(.minute, from: now)
        let currentTimeInMinutes = currentHour * 60 + currentMinute
        let setupTimeInMinutes = Int(hour) * 60 + Int(minute)
        
        // Find next occurrence
        for i in 0..<7 {
            let checkDay = (currentWeekday + i) % 7
            if weekdaysArray.contains(checkDay) {
                if i == 0 && currentTimeInMinutes < setupTimeInMinutes {
                    // Today, but call time hasn't passed
                    var components = calendar.dateComponents([.year, .month, .day], from: now)
                    components.hour = Int(hour)
                    components.minute = Int(minute)
                    return calendar.date(from: components)
                } else if i > 0 {
                    // Future day
                    let futureDate = calendar.date(byAdding: .day, value: i, to: now)!
                    var components = calendar.dateComponents([.year, .month, .day], from: futureDate)
                    components.hour = Int(hour)
                    components.minute = Int(minute)
                    return calendar.date(from: components)
                }
            }
        }
        return nil
    }
    
    override public func awakeFromInsert() {
        super.awakeFromInsert()
        id = UUID()
        createdAt = Date()
        updatedAt = Date()
        isActive = true
        retryAttempts = 3
        retryDelay = 5
    }
    
    override public func willSave() {
        super.willSave()
        updatedAt = Date()
    }
}

// MARK: - Core Data Extensions
extension CallSetup {
    
    // Note: fetchRequest() is auto-generated by Core Data when Codegen is set to Category/Extension
    // Removed duplicate fetchRequest() method to avoid compilation conflicts
    
}
